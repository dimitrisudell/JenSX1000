/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "JenColours.h"


//==============================================================================
JenSx1000AudioProcessorEditor::JenSx1000AudioProcessorEditor (JenSx1000AudioProcessor& p)
: AudioProcessorEditor (&p), processor (p), vcoTune(JenColours::red), vcoOctave(JenColours::red), vcoVibrato(JenColours::yellow), vcoWaveform(JenColours::red), vcoPulseWidth(JenColours::red), vcoPWM(JenColours::red), vcoLevel(JenColours::red), vcoGlide(JenColours::red), lfoSpeed(JenColours::yellow), vcfFrequency(JenColours::white), vcfResonance(JenColours::white), vcfLFO(JenColours::yellow), vcfEnvLevel(JenColours::blue), vcfAttack(JenColours::blue), vcfDecay(JenColours::blue), vcfSustain(JenColours::blue), vcfRelease(JenColours::blue), noiseNoise(JenColours::green), noiseLevel(JenColours::green), vcaOutputVolume(JenColours::white), vcaAttack(JenColours::blue), vcaDecay(JenColours::blue), vcaSustain(JenColours::blue), vcaRelease(JenColours::blue)
{
    DBG("\n-- JenSx1000AudioProcessorEditor contructor called\n");
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (backgroundImage.getWidth(), backgroundImage.getHeight());
    
    addAndMakeVisible(backgroundImage);
    
    addAndMakeVisible(vcoTune);
    addAndMakeVisible(vcoOctave);
    addAndMakeVisible(vcoVibrato);
    addAndMakeVisible(vcoWaveform);
    addAndMakeVisible(vcoPulseWidth);
    addAndMakeVisible(vcoPWM);
    addAndMakeVisible(vcoLevel);
    addAndMakeVisible(vcoGlide);
    addAndMakeVisible(lfoSpeed);
    addAndMakeVisible(vcfFrequency);
    addAndMakeVisible(vcfResonance);
    addAndMakeVisible(vcfLFO);
    addAndMakeVisible(vcfEnvLevel);
    addAndMakeVisible(vcfAttack);
    addAndMakeVisible(vcfDecay);
    addAndMakeVisible(vcfSustain);
    addAndMakeVisible(vcfRelease);
    addAndMakeVisible(noiseNoise);
    addAndMakeVisible(noiseLevel);
    addAndMakeVisible(vcaOutputVolume);
    addAndMakeVisible(vcaAttack);
    addAndMakeVisible(vcaDecay);
    addAndMakeVisible(vcaSustain);
    addAndMakeVisible(vcaRelease);
    
    // ------- VCO Listeners --------------------------------------------------
    
    vcoTune.addListener(this);
    vcoOctave.addListener(this);
    vcoVibrato.addListener(this);
    vcoWaveform.addListener(this);
    vcoPulseWidth.addListener(this);
    vcoPWM.addListener(this);
    vcoLevel.addListener(this);
    vcoGlide.addListener(this);
    
    // ------- VCF Listeners --------------------------------------------------
    vcfFrequency.addListener(this);
    vcfResonance.addListener(this);
    vcfLFO.addListener(this);
    vcfEnvLevel.addListener(this);
    vcfAttack.addListener(this);
    vcfDecay.addListener(this);
    vcfSustain.addListener(this);
    vcfRelease.addListener(this);
    
    // ------- VCA Listeners --------------------------------------------------
    vcaOutputVolume.addListener(this);
    vcaAttack.addListener(this);
    vcaDecay.addListener(this);
    vcaSustain.addListener(this);
    vcaRelease.addListener(this);
    
    // ------- LFO Listeners --------------------------------------------------
    lfoSpeed.addListener(this);
    
    // ------- Noise Listeners ------------------------------------------------
    noiseNoise.addListener(this);
    noiseLevel.addListener(this);
    
    startTimer(50); //start calling timerCallback function
}

JenSx1000AudioProcessorEditor::~JenSx1000AudioProcessorEditor()
{
    // ------- VCO Listeners --------------------------------------------------
    
    vcoTune.removeListener(this);
    vcoOctave.removeListener(this);
    vcoVibrato.removeListener(this);
    vcoWaveform.removeListener(this);
    vcoPulseWidth.removeListener(this);
    vcoPWM.removeListener(this);
    vcoLevel.removeListener(this);
    vcoGlide.removeListener(this);
    
    // ------- VCF Listeners --------------------------------------------------
    vcfFrequency.removeListener(this);
    vcfResonance.removeListener(this);
    vcfLFO.removeListener(this);
    vcfEnvLevel.removeListener(this);
    vcfAttack.removeListener(this);
    vcfDecay.removeListener(this);
    vcfSustain.removeListener(this);
    vcfRelease.removeListener(this);
    
    // ------- VCA Listeners --------------------------------------------------
    vcaOutputVolume.removeListener(this);
    vcaAttack.removeListener(this);
    vcaDecay.removeListener(this);
    vcaSustain.removeListener(this);
    vcaRelease.removeListener(this);
    
    // ------- LFO Listeners --------------------------------------------------
    lfoSpeed.removeListener(this);
    
    // ------- Noise Listeners ------------------------------------------------
    noiseNoise.removeListener(this);
    noiseLevel.removeListener(this);
    
    stopTimer();
}

//==============================================================================
void JenSx1000AudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);
}

void JenSx1000AudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    
    backgroundImage.setTopLeftPosition(0, 0);
    
    const int spacingX = 106;
    const int spacingY = 120;
    
    vcoTune.setTopLeftPosition(0,0);
    vcoOctave.setTopLeftPosition(vcoTune.getPosition().getX() + spacingX, 0);
    vcoVibrato.setTopLeftPosition(vcoOctave.getPosition().getX() + spacingX, 0);
    lfoSpeed.setTopLeftPosition(vcoVibrato.getPosition().getX() + spacingX, 0);
    vcfFrequency.setTopLeftPosition(lfoSpeed.getPosition().getX() + spacingX, 0);
    vcfResonance.setTopLeftPosition(vcfFrequency.getPosition().getX() + spacingX, 0);
    vcfLFO.setTopLeftPosition(vcfResonance.getPosition().getX() + spacingX, 0);
    vcfEnvLevel.setTopLeftPosition(vcfLFO.getPosition().getX() + spacingX, 0);
    
    vcoWaveform.setTopLeftPosition(vcoTune.getPosition().getX(), spacingY);
    vcoPulseWidth.setTopLeftPosition(vcoOctave.getPosition().getX(), spacingY);
    vcoPWM.setTopLeftPosition(vcoVibrato.getPosition().getX(), spacingY);
    vcoLevel.setTopLeftPosition(lfoSpeed.getPosition().getX(), spacingY);
    vcfAttack.setTopLeftPosition(vcfFrequency.getPosition().getX(), spacingY);
    vcfDecay.setTopLeftPosition(vcfResonance.getPosition().getX(), spacingY);
    vcfSustain.setTopLeftPosition(vcfLFO.getPosition().getX(), spacingY);
    vcfRelease.setTopLeftPosition(vcfEnvLevel.getPosition().getX(), spacingY);
    
    vcoGlide.setTopLeftPosition(vcoTune.getPosition().getX(), spacingY * 2);
    noiseNoise.setTopLeftPosition(vcoOctave.getPosition().getX(), spacingY * 2);
    noiseLevel.setTopLeftPosition(vcoVibrato.getPosition().getX(), spacingY * 2);
    vcaOutputVolume.setTopLeftPosition(lfoSpeed.getPosition().getX(), spacingY * 2);
    vcaAttack.setTopLeftPosition(vcfFrequency.getPosition().getX(), spacingY * 2);
    vcaDecay.setTopLeftPosition(vcfResonance.getPosition().getX(), spacingY * 2);
    vcaSustain.setTopLeftPosition(vcfLFO.getPosition().getX(), spacingY * 2);
    vcaRelease.setTopLeftPosition(vcfEnvLevel.getPosition().getX(), spacingY * 2);
    
}

//==============================================================================
// This timer periodically checks whether any of the filter's parameters have changed...
void JenSx1000AudioProcessorEditor::timerCallback()
{
    JenSx1000AudioProcessor& ourProcessor = getProcessor();
    
    //------- VCO --------------------------------------------------------------
    vcoTune.setValue(ourProcessor.vcoTuneParam->getValue(), dontSendNotification);
    //vcoTune.repaint();
    vcoOctave.setValue(ourProcessor.vcoOctaveParam->getValue(), dontSendNotification);
    //vcoOctave.repaint();
    vcoVibrato.setValue(ourProcessor.vcoVibratoParam->getValue(), dontSendNotification);
    //vcoVibrato.repaint();
    vcoWaveform.setValue(ourProcessor.vcoWaveformParam->getValue(), dontSendNotification);
    //vcoWaveform.repaint();
    vcoPulseWidth.setValue(ourProcessor.vcoPulseWidthParam->getValue(), dontSendNotification);
    //vcoPulseWidth.repaint();
    vcoPWM.setValue(ourProcessor.vcoPWMParam->getValue(), dontSendNotification);
    //vcoPWM.repaint();
    vcoLevel.setValue(ourProcessor.vcoLevelParam->getValue(), dontSendNotification);
    //vcoLevel.slider.repaint();
    vcoGlide.setValue(ourProcessor.vcoGlideParam->getValue(), dontSendNotification);
    //vcoGlide.repaint();
    
    //------- LFO --------------------------------------------------------------
    lfoSpeed.setValue(ourProcessor.lfoSpeedParam->getValue(), dontSendNotification);
    
    //------- VCF --------------------------------------------------------------
    vcfFrequency.setValue(ourProcessor.vcfFrequencyParam->getValue(), dontSendNotification);
    vcfResonance.setValue(ourProcessor.vcfResonanceParam->getValue(), dontSendNotification);
    vcfLFO.setValue(ourProcessor.vcfLFOParam->getValue(), dontSendNotification);
    vcfEnvLevel.setValue(ourProcessor.vcfEnvLevelParam->getValue(), dontSendNotification);
    vcfAttack.setValue(ourProcessor.vcfAttackParam->getValue(), dontSendNotification);
    vcfDecay.setValue(ourProcessor.vcfDecayParam->getValue(), dontSendNotification);
    vcfSustain.setValue(ourProcessor.vcfSustainParam->getValue(), dontSendNotification);
    vcfRelease.setValue(ourProcessor.vcfReleaseParam->getValue(), dontSendNotification);
    
    //------- Noise ------------------------------------------------------------
    noiseNoise.setValue(ourProcessor.noiseNoiseParam->getValue(), dontSendNotification);
    noiseLevel.setValue(ourProcessor.noiseLevelParam->getValue(), dontSendNotification);
    
    //------- VCA --------------------------------------------------------------
    vcaOutputVolume.setValue(ourProcessor.vcaOutputVolumeParam->getValue(), dontSendNotification);
    vcaAttack.setValue(ourProcessor.vcaAttackParam->getValue(), dontSendNotification);
    vcaDecay.setValue(ourProcessor.vcaDecayParam->getValue(), dontSendNotification);
    vcaSustain.setValue(ourProcessor.vcaSustainParam->getValue(), dontSendNotification);
    vcaRelease.setValue(ourProcessor.vcaReleaseParam->getValue(), dontSendNotification);
    
}


void JenSx1000AudioProcessorEditor::sliderDragStarted (Slider* slider)
{
    if (AudioProcessorParameter* param = getParameterFromSlider(slider))
    {
        param->beginChangeGesture();
    }
}

void JenSx1000AudioProcessorEditor::sliderDragEnded (Slider* slider)
{
    if (AudioProcessorParameter* param = getParameterFromSlider(slider))
    {
        param->endChangeGesture();
    }
}

void JenSx1000AudioProcessorEditor::sliderValueChanged(Slider* slider){
    getParameterFromSlider(slider)->setValueNotifyingHost ((float) slider->getValue());
}

AudioProcessorParameter* JenSx1000AudioProcessorEditor::getParameterFromSlider (const Slider* slider) const
{
    
    //------- VCO Sliders -------------------------------------------------------
    if (slider == &vcoTune){return getProcessor().vcoTuneParam;}
    else if (slider == &vcoOctave){return getProcessor().vcoOctaveParam;}
    else if (slider == &vcoVibrato){return getProcessor().vcoVibratoParam;}
    else if (slider == &vcoWaveform){return getProcessor().vcoWaveformParam;}
    else if (slider == &vcoPulseWidth){return getProcessor().vcoPulseWidthParam;}
    else if (slider == &vcoPWM){return getProcessor().vcoPWMParam;}
    else if (slider == &vcoLevel){return getProcessor().vcoLevelParam;}
    else if (slider == &vcoGlide){return getProcessor().vcoGlideParam;}
    
    //------- LFO Sliders --------------------------------------------------------
    else if (slider == &lfoSpeed){return getProcessor().lfoSpeedParam;}
    
    //------- VCF Sliders --------------------------------------------------------
    else if (slider == &vcfFrequency){return getProcessor().vcfFrequencyParam;}
    else if (slider == &vcfResonance){return getProcessor().vcfResonanceParam;}
    else if (slider == &vcfLFO){return getProcessor().vcfLFOParam;}
    else if (slider == &vcfEnvLevel){return getProcessor().vcfEnvLevelParam;}
    else if (slider == &vcfAttack){return getProcessor().vcfAttackParam;}
    else if (slider == &vcfDecay){return getProcessor().vcfDecayParam;}
    else if (slider == &vcfSustain){return getProcessor().vcfSustainParam;}
    else if (slider == &vcfRelease){return getProcessor().vcfReleaseParam;}
    
    //------- Noise Sliders -------------------------------------------------------
    else if (slider == &noiseNoise){return getProcessor().noiseNoiseParam;}
    else if (slider == &noiseLevel){return getProcessor().noiseLevelParam;}
    
    //------- VCA Sliders ---------------------------------------------------------
    else if (slider == &vcaOutputVolume){return getProcessor().vcaOutputVolumeParam;}
    else if (slider == &vcaAttack){return getProcessor().vcaAttackParam;}
    else if (slider == &vcaDecay){return getProcessor().vcaDecayParam;}
    else if (slider == &vcaSustain){return getProcessor().vcaSustainParam;}
    else if (slider == &vcaRelease){return getProcessor().vcaReleaseParam;}
    
    return nullptr;
}
