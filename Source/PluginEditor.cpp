/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
JenSx1000AudioProcessorEditor::JenSx1000AudioProcessorEditor (JenSx1000AudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    DBG("\n-- JenSx1000AudioProcessorEditor contructor called\n");
    
    setLookAndFeel(LF);
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (900, 450);

    addAndMakeVisible(backgroundImage);
    addAndMakeVisible(oscComponent);
    addAndMakeVisible(lfoComponent);
    addAndMakeVisible(filterComponent);
    addAndMakeVisible(noiseComponent);
    addAndMakeVisible(ampComponent);
    
    // ------- VCO Listeners --------------------------------------------------
    
    oscComponent.tune.slider.addListener(this);
    oscComponent.vibrato.slider.addListener(this);
    oscComponent.octave.slider.addListener(this);
    oscComponent.waveform.slider.addListener(this);
    oscComponent.pulsewidth.slider.addListener(this);
    oscComponent.pwm.slider.addListener(this);
    oscComponent.glide.slider.addListener(this);
    oscComponent.level.slider.addListener(this);
    
    
    // ------- VCF Listeners --------------------------------------------------
    filterComponent.frequency.slider.addListener(this);
    filterComponent.resonance.slider.addListener(this);
    filterComponent.lfo.slider.addListener(this);
    filterComponent.envLevel.slider.addListener(this);
    filterComponent.envelope.attack.slider.addListener(this);
    filterComponent.envelope.decay.slider.addListener(this);
    filterComponent.envelope.sustain.slider.addListener(this);
    filterComponent.envelope.release.slider.addListener(this);
    
    // ------- VCA Listeners --------------------------------------------------
    ampComponent.envelope.attack.slider.addListener(this);
    ampComponent.envelope.decay.slider.addListener(this);
    ampComponent.envelope.sustain.slider.addListener(this);
    ampComponent.envelope.release.slider.addListener(this);
    ampComponent.outputVolume.slider.addListener(this);
    
    // ------- LFO Listeners --------------------------------------------------
    lfoComponent.speed.slider.addListener(this);
    
    // ------- Noise Listeners ------------------------------------------------
    noiseComponent.noise.slider.addListener(this);
    noiseComponent.level.slider.addListener(this);
    
    startTimer(50); //start calling timerCallback function
}

JenSx1000AudioProcessorEditor::~JenSx1000AudioProcessorEditor()
{
    // ------- ampComponent -------
    ampComponent.envelope.attack.slider.removeListener(this);
    ampComponent.envelope.decay.slider.removeListener(this);
    ampComponent.envelope.sustain.slider.removeListener(this);
    ampComponent.envelope.release.slider.removeListener(this);
    
    // ------- oscComponent -------
    oscComponent.tune.slider.removeListener(this);
    oscComponent.vibrato.slider.removeListener(this);
    oscComponent.octave.slider.removeListener(this);
    oscComponent.waveform.slider.removeListener(this);
    oscComponent.pulsewidth.slider.removeListener(this);
    oscComponent.pwm.slider.removeListener(this);
    oscComponent.glide.slider.removeListener(this);
    oscComponent.level.slider.removeListener(this);
    
    // ------- LFOComponent -------
    lfoComponent.speed.slider.removeListener(this);
    
    // ------- filterComponent -------
    filterComponent.frequency.slider.removeListener(this);
    filterComponent.resonance.slider.removeListener(this);
    filterComponent.lfo.slider.removeListener(this);
    filterComponent.envLevel.slider.removeListener(this);
    filterComponent.envelope.attack.slider.removeListener(this);
    filterComponent.envelope.decay.slider.removeListener(this);
    filterComponent.envelope.sustain.slider.removeListener(this);
    filterComponent.envelope.release.slider.removeListener(this);
    
    // ------- noiseComponent -------
    noiseComponent.noise.slider.removeListener(this);
    noiseComponent.level.slider.removeListener(this);
    
    stopTimer();
}

//==============================================================================
void JenSx1000AudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);
}

void JenSx1000AudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    
    oscComponent.setTopLeftPosition(0, 0);
    lfoComponent.setTopLeftPosition(318, 0);
    filterComponent.setTopLeftPosition(400, 0);
    noiseComponent.setTopLeftPosition(100, 200);
    ampComponent.setTopLeftPosition(300, 200);
    
}

//==============================================================================
// This timer periodically checks whether any of the filter's parameters have changed...
void JenSx1000AudioProcessorEditor::timerCallback()
{
    JenSx1000AudioProcessor& ourProcessor = getProcessor();
    
    //------- VCO --------------------------------------------------------------
    oscComponent.tune.slider.setValue(ourProcessor.vcoTuneParam->getValue(), dontSendNotification);
    oscComponent.octave.slider.setValue(ourProcessor.vcoOctaveParam->getValue(), dontSendNotification);
    oscComponent.vibrato.slider.setValue(ourProcessor.vcoVibratoParam->getValue(), dontSendNotification);
    oscComponent.waveform.slider.setValue(ourProcessor.vcoWaveformParam->getValue(), dontSendNotification);
    oscComponent.pulsewidth.slider.setValue(ourProcessor.vcoPulseWidthParam->getValue(), dontSendNotification);
    oscComponent.pwm.slider.setValue(ourProcessor.vcoPWMParam->getValue(), dontSendNotification);
    oscComponent.level.slider.setValue(ourProcessor.vcoLevelParam->getValue(), dontSendNotification);
    oscComponent.glide.slider.setValue(ourProcessor.vcoGlideParam->getValue(), dontSendNotification);
    
    //------- LFO --------------------------------------------------------------
    lfoComponent.speed.slider.setValue(ourProcessor.lfoSpeedParam->getValue(), dontSendNotification);
    
    //------- VCF --------------------------------------------------------------
    filterComponent.frequency.slider.setValue(ourProcessor.vcfFrequencyParam->getValue(), dontSendNotification);
    filterComponent.resonance.slider.setValue(ourProcessor.vcfResonanceParam->getValue(), dontSendNotification);
    filterComponent.lfo.slider.setValue(ourProcessor.vcfLFOParam->getValue(), dontSendNotification);
    filterComponent.envLevel.slider.setValue(ourProcessor.vcfEnvLevelParam->getValue(), dontSendNotification);
    filterComponent.envelope.attack.slider.setValue(ourProcessor.vcfAttackParam->getValue(), dontSendNotification);
    filterComponent.envelope.decay.slider.setValue(ourProcessor.vcfDecayParam->getValue(), dontSendNotification);
    filterComponent.envelope.sustain.slider.setValue(ourProcessor.vcfSustainParam->getValue(), dontSendNotification);
    filterComponent.envelope.release.slider.setValue(ourProcessor.vcfReleaseParam->getValue(), dontSendNotification);
    
    //------- Noise ------------------------------------------------------------
    noiseComponent.noise.slider.setValue(ourProcessor.noiseNoiseParam->getValue(), dontSendNotification);
    noiseComponent.level.slider.setValue(ourProcessor.noiseLevelParam->getValue(), dontSendNotification);
    
    //------- VCA --------------------------------------------------------------
    ampComponent.outputVolume.slider.setValue(ourProcessor.vcaOutputVolumeParam->getValue(), dontSendNotification);
    ampComponent.envelope.attack.slider.setValue(ourProcessor.vcaAttackParam->getValue(), dontSendNotification);
    ampComponent.envelope.decay.slider.setValue(ourProcessor.vcaDecayParam->getValue(), dontSendNotification);
    ampComponent.envelope.sustain.slider.setValue(ourProcessor.vcaSustainParam->getValue(), dontSendNotification);
    ampComponent.envelope.release.slider.setValue(ourProcessor.vcaReleaseParam->getValue(), dontSendNotification);
    
}


void JenSx1000AudioProcessorEditor::sliderDragStarted (Slider* slider)
{
    if (AudioProcessorParameter* param = getParameterFromSlider(slider))
    {
        param->beginChangeGesture();
    }
}

void JenSx1000AudioProcessorEditor::sliderDragEnded (Slider* slider)
{
    if (AudioProcessorParameter* param = getParameterFromSlider(slider))
    {
        param->endChangeGesture();
    }
}

void JenSx1000AudioProcessorEditor::sliderValueChanged(Slider* slider){
    getParameterFromSlider(slider)->setValueNotifyingHost ((float) slider->getValue());
}

AudioProcessorParameter* JenSx1000AudioProcessorEditor::getParameterFromSlider (const Slider* slider) const
{
    
    //------- VCO Sliders -------------------------------------------------------
    if (slider == &oscComponent.tune.slider){return getProcessor().vcoTuneParam;}
    else if (slider == &oscComponent.octave.slider){return getProcessor().vcoOctaveParam;}
    else if (slider == &oscComponent.vibrato.slider){return getProcessor().vcoVibratoParam;}
    else if (slider == &oscComponent.waveform.slider){return getProcessor().vcoWaveformParam;}
    else if (slider == &oscComponent.pulsewidth.slider){return getProcessor().vcoPulseWidthParam;}
    else if (slider == &oscComponent.pwm.slider){return getProcessor().vcoPWMParam;}
    else if (slider == &oscComponent.level.slider){return getProcessor().vcoLevelParam;}
    else if (slider == &oscComponent.glide.slider){return getProcessor().vcoGlideParam;}
    
    //------- LFO Sliders --------------------------------------------------------
    else if (slider == &lfoComponent.speed.slider){return getProcessor().lfoSpeedParam;}
    
    //------- VCF Sliders --------------------------------------------------------
    else if (slider == &filterComponent.frequency.slider){return getProcessor().vcfFrequencyParam;}
    else if (slider == &filterComponent.resonance.slider){return getProcessor().vcfResonanceParam;}
    else if (slider == &filterComponent.lfo.slider){return getProcessor().vcfLFOParam;}
    else if (slider == &filterComponent.envLevel.slider){return getProcessor().vcfEnvLevelParam;}
    else if (slider == &filterComponent.envelope.attack.slider){return getProcessor().vcfAttackParam;}
    else if (slider == &filterComponent.envelope.decay.slider){return getProcessor().vcfDecayParam;}
    else if (slider == &filterComponent.envelope.sustain.slider){return getProcessor().vcfSustainParam;}
    else if (slider == &filterComponent.envelope.release.slider){return getProcessor().vcfReleaseParam;}
    
    //------- Noise Sliders -------------------------------------------------------
    else if (slider == &noiseComponent.noise.slider){return getProcessor().noiseNoiseParam;}
    else if (slider == &noiseComponent.level.slider){return getProcessor().noiseLevelParam;}
    
    //------- VCA Sliders ---------------------------------------------------------
    else if (slider == &ampComponent.outputVolume.slider){return getProcessor().vcaOutputVolumeParam;}
    else if (slider == &ampComponent.envelope.attack.slider){return getProcessor().vcaAttackParam;}
    else if (slider == &ampComponent.envelope.decay.slider){return getProcessor().vcaDecayParam;}
    else if (slider == &ampComponent.envelope.sustain.slider){return getProcessor().vcaSustainParam;}
    else if (slider == &ampComponent.envelope.release.slider){return getProcessor().vcaReleaseParam;}
    
    return nullptr;
}
